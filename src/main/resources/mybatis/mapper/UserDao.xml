<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.edu.nju.movietubeserver.dao.UserDao">

  <sql id="all_columns">
    user_id, username, email, gender, password, role_id, nickname, phone_number, address
  </sql>

  <resultMap id="UserMap" type="UserPo">
    <id column="user_id" property="userId" jdbcType="INTEGER"/>
    <result column="username" property="username" jdbcType="VARCHAR"/>
    <result column="email" property="email" jdbcType="VARCHAR"/>
    <result column="gender" property="gender" jdbcType="VARCHAR"/>
    <result column="password" property="password" jdbcType="VARCHAR"/>
    <result column="role_id" property="roleId" jdbcType="INTEGER"/>
    <result column="nickname" property="nickname" jdbcType="VARCHAR"/>
    <result column="phone_number" property="phoneNumber" jdbcType="VARCHAR"/>
    <result column="address" property="address" jdbcType="VARCHAR"/>
  </resultMap>

  <resultMap id="SimpleUserMap" type="SimpleUser">
    <id column="user_id" property="userId" jdbcType="INTEGER"/>
    <result column="username" property="username" jdbcType="VARCHAR"/>
  </resultMap>

  <resultMap id="UserWithRoleMap" type="UserPo" extends="UserMap">
    <result column="role_name" jdbcType="VARCHAR" property="roleName"/>
  </resultMap>

  <resultMap id="UserDetailMap" type="UserPo" extends="UserWithRoleMap">
    <!-- 1角色对应多权限 -->
    <collection property="permissionCodeList" ofType="String">
      <result column="authority_code" jdbcType="VARCHAR" property="authorityCode"/>
    </collection>
  </resultMap>

  <insert id="insertUser" parameterType="UserPo" useGeneratedKeys="true" keyProperty="userPo.userId">
    INSERT INTO t_users (<include refid="all_columns"/>)
    VALUES
    (
    #{userPo.userId}, #{userPo.username}, #{userPo.email},
    #{userPo.gender}, #{userPo.password}, #{userPo.roleId},
    #{userPo.nickname}, #{userPo.phoneNumber}, #{userPo.address}
    )
  </insert>

  <select id="getUserByUsername" resultMap="UserDetailMap">
    SELECT
      u.*,
      r.role_name,
      p.role_id,
      p.authority_code
    FROM `t_users` u
    LEFT JOIN `t_role` r ON u.role_id = r.role_id
    LEFT JOIN `t_permission` p ON r.role_id = p.role_id
    WHERE u.username = #{username}
  </select>

  <select id="getUserByEmail" resultMap="UserDetailMap">
    SELECT
      u.*,
      r.role_name,
      p.role_id,
      p.authority_code
    FROM `t_users` u
    LEFT JOIN `t_role` r ON u.role_id = r.role_id
    LEFT JOIN `t_permission` p ON r.role_id = p.role_id
    WHERE u.email = #{email}
  </select>

  <update id="updateUserInfoById">
    UPDATE t_users
    SET
    <if test="userPo.username != null">username = #{userPo.username},</if>
    <if test="userPo.email != null">email = #{userPo.email},</if>
    <if test="userPo.nickname != null">nickname = #{userPo.nickname},</if>
    <if test="userPo.phoneNumber != null">phone_number = #{userPo.phoneNumber},</if>
    <if test="userPo.address != null">address = #{userPo.address}</if>
    WHERE
      user_id = #{userPo.userId}
  </update>

  <update id="updateRoleIdByUserId">
    UPDATE t_users u
    SET u.role_id  = #{roleId}
    WHERE user_id = #{userId}
  </update>

  <select id="listAllSimpleUsers" resultMap="SimpleUserMap">
    SELECT user_id, username FROM t_users
  </select>

</mapper>
